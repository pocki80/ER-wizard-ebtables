#!/bin/bash
#
# EdgeMAX Wizard "ER-wizard-ebtables" created 05/2017 by CPO/BMK for FunkFeuer.at
# Version 20170517
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
# Shortform: ER-wizard-AutoUpdate
#
# Github repository: https://github.com/pocki80/ER-wizard-ebtables
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.0+)
#

ACTION=$1
INPUT=$2

cfgusrdir="/config/user-data/"
log="/var/log/0xffebtables.log"

#define update sources on github
gitowner="pocki80"
gitrepo="ER-wizard-ebtables"
gitbranch="master"

#
# DO NOT EDIT BELOW HERE !
#

echo "EdgeMAX ER-wizard-ebtables Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log

#base64begin 
# !dont edit or remove this comment!

####################
# migrate /etc/rc.local to pre-config.d/ebtables.sh if not yet done??

# remove installtion block
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
    echo -n "{\"success\":\"0\",\"error\":\"ebtables.sh not found\""
    echo -n " },"
    echo    " \"definition\":{ }}"
    exit 0
fi

####################
# parse existing settings and correct if needed!
# 
# remove ACCEPT for olsr-bridges
# remove ebtables for interfaces that are no longer bridged
# complete ACCEPT if -i or -o is missing
# compare ebtables.sh to live-settings

### use this for br0.1100 like br0(eth0,eth1)
#ebtables -A FORWARD -p 802_1Q --vlan-id 1100 -j ACCEPT
#
### more precize: -i/o for each eth-port of br0
#ebtables -A FORWARD -i eth0 -p 802_1Q --vlan-id 1100 -j ACCEPT
#ebtables -A FORWARD -o eth0 -p 802_1Q --vlan-id 1100 -j ACCEPT
#ebtables -A FORWARD -i eth1 -p 802_1Q --vlan-id 1100 -j ACCEPT
#ebtables -A FORWARD -o eth1 -p 802_1Q --vlan-id 1100 -j ACCEPT
#
#
### use this for bridged vif-eth-ports like br1(eth0.8,eth2.8)
#ebtables -A FORWARD -i eth0.8 -j ACCEPT
#ebtables -A FORWARD -o eth0.8 -j ACCEPT
#ebtables -A FORWARD -i eth2.8 -j ACCEPT
#ebtables -A FORWARD -o eth2.8 -j ACCEPT


# function called when you click the wizard
load () {
    echo "Load procedure..." >>$log
    packagestatus='"packagestatus":"ok"'

    ####### wizard version check against github
    # 
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -iv olsr); do
        if [[ $(head $i -n 10 | grep 'ER-wizard-ebtables') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: ER-wizard-ebtables wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -sL --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus=',"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-ebtables=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi
    
    
    ####### get bridges and their interfaces 
    # get mesh interfaces
    olsrd4default='/etc/default/olsrd'
    olsrd4meshif=$(awk -F= '/MESH_IF=/ { print $2 }' $olsrd4default | tr -d \")
    # get current accept-rules
    ebtablesaccept=$(ebtables -L FORWARD | sed -e '/^$/d' | grep -E "\-[io] eth.{1,6} \-j ACCEPT")
    # get bridges
    bridgeslist=$(/usr/sbin/brctl show | awk {'print $1","$4'})

    # generate list arrays
    for i in $bridgeslist; do
        part1=$(echo $i | cut -d"," -f1)
        [ "$part1" == "bridge" ] && continue
        part2=$(echo $i | cut -d"," -f2)
        if [ "$part2" ]; then
            bridge=$part1
            port=$part2
            moveon=""
        else
            port=$part1
            moveon=1
        fi
        for this in "$ebtablesaccept"; do
            rules=$(echo "$ebtablesaccept" | grep -c "$port ")
        done
        interfaces=$interfaces'{'$intfstatus'"interface":"'${port}'","name":"'${name}'","rules":"'${rules}'"},'
        [ "$moveon" ] && continue
        olsron=""
        if [[ "$olsrd4meshif" != "${olsrd4meshif/ /}" ]]; then
            olsrd4meshif=$(echo $olsrd4meshif | tr -d \")
            for mintf in $olsrd4meshif; do
                if [[ "$mintf" == "$bridge" ]]; then
                    olsron="OLSRv1"
                fi
            done
        else
            if [[ "$olsrd4meshif" == "$bridge" ]]; then
                olsron="OLSRv1"
            fi
        fi
        bridges=$bridges'{"olsr":"'${olsron}'",'$bridgestatus'"bridge":"'${bridge}'","name":"'${name}'"},'
        ## now check for vifs of that bridge, i.e. br0.1100
        for v in $(ls /opt/vyatta/config/active/interfaces/bridge/$bridge/vif 2>/dev/null); do
            olsron=""
            if [[ "$olsrd4meshif" != "${olsrd4meshif/ /}" ]]; then
                olsrd4meshif=$(echo $olsrd4meshif | tr -d \")
                for mintf in $olsrd4meshif; do
                    if [[ "$mintf" == "$bridge"".""$v" ]]; then
                        olsron="OLSRv1"
                    fi
                done
            else
                if [[ "$olsrd4meshif" == "$bridge"".""$v" ]]; then
                    olsron="OLSRv1"
                fi
            fi
            bridges=$bridges'{"olsr":"'${olsron}'",'$bridgestatus'"bridge":"'${bridge}'.'${v}'","name":"'${name}'"},'
        done
    done
    bridges=${bridges%","}
    interfaces=${interfaces%","}
    # end
    ####### get bridges and their interfaces 

    # get all variables together for output
    echo -n "{\"success\":\"1\",\"data\":{ $packagestatus $autoupdatefromgithub $updatestatus ,\"bridges\":[$bridges],\"interfaces\":[$interfaces]"
    echo -n " },"
    echo    " \"definition\":{ }}"
}

# function called when you click apply
apply () {
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT)
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        olsrdwizard=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep 'ER-wizard-ebtables') ]]; then
                olsrdwizard=$i
                break
            fi
        done
        if [ ! $olsrdwizard ]; then
            echo "error: ER-wizard-ebtables wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -sL -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://api.github.com/repos/$gitowner/$gitrepo/tarball >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-ebtables=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-ebtables=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-ebtables=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-ebtables=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-ebtables=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-ebtables=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-ebtables=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=off-ebtables&r=$(hostname)" >/dev/null 2>/dev/null
        fi
    fi
    # end
    ####### wizard manual update from github

    # for debugging purposes
    cp $INPUT /tmp/result.json

    # $ret and $output comes from port change
    if [ "$ret" == "1" ]; then
        echo "{\"success\":\"0\",\"error\": \"${output//\"/\'}\"}"
    else
        echo "{\"success\":\"1\"}"
    fi
}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX ER-wizard-ebtables Wizard ended $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
